{
  "openapi": "3.0.3",
  "info": {
    "title": "Phonebook App",
    "description": "This is a Phonebook App Server.\n\nSome useful links:\n- [The Phonebook App repository](https://github.com/MarynaPotiievska/nodejs-homework-rest-api)",
    "version": "1.0.1"
  },
  "consumes": ["application/json", "multipart/form-data"],
  "produces": ["application/json"],
  "servers": [
    {
      "url": "https://contacts-rest-api-j4yy.onrender.com"
    }
  ],
  "tags": [
    {
      "name": "Users",
      "description": "Operations about authorization"
    },
    {
      "name": "Contacts",
      "description": "Operations about contacts"
    }
  ],
  "paths": {
    "/users/register": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "User registration",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/Authentification"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "subscription": {
                        "type": "string",
                        "enum": [
                          "starter",
                          "pro",
                          "business"
                        ]
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          },
          "400": {
            "description": "Missing required field"
          },
          "409": {
            "description": "Email in use"
          }
        }
      }
    },
    "/users/verify/{verificationToken}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "User verify by verification token",
        "parameters": [
          {
            "in": "path",
            "name": "verificationToken",
            "required": true,
            "schema": {
              "type": "string",
              "example": "xNKJlBYfkvHTpm8lHwQWh"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Verification successful"
          },
          "400": {
            "description": "Verification has already been passed"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/users/verify": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Resend email for user verify by verification token",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email"
                ],
                "properties": {
                  "email": {
                    "type": "string",
                    "description": "user's email",
                    "pattern": "^\\w+([.-_]?\\w+)*@\\w+([.-_]?\\w+)*(\\.\\w{2,3})+$",
                    "example": "qwerty_123@gmail.com",
                    "format": "email"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Verification email sent"
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Verification has already been passed"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/users/login": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "User login",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Authentification"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "token": {
                          "type": "string",
                          "example": "646e24527f053eb2a6cf828d"
                        }
                      }
                    },
                    {
                      "$ref": "#/components/schemas/UserResponse"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Not authorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Email or password is wrong"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/current": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get user info by token after refreshing",
        "parameters": [],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          },
          "401": {
            "description": "Not authorized"
          }
        }
      }
    },
    "/users/logout": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Logout of the authorized user",
        "operationId": "logout",
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "204": {
            "description": "Successful operation"
          },
          "401": {
            "description": "Not authorized"
          }
        }
      }
    },
    "/users": {
      "patch": {
        "tags": [
          "Users"
        ],
        "summary": "Update user's subscription",
        "security": [
          {
            "Bearer": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "subscription"
                ],
                "properties": {
                  "subscription": {
                    "type": "string",
                    "enum": [
                      "starter",
                      "pro",
                      "business"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          },
          "400": {
            "description": "Missing required field"
          },
          "401": {
            "description": "Not authorized"
          }
        }
      }
    },
    "/users/avatars": {
      "patch": {
        "tags": [
          "Users"
        ],
        "summary": "Update user's subscription",
        "security": [
          {
            "Bearer": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "avatar"
                ],
                "properties": {
                  "avatar": {
                    "type": "string",
                    "format": "binary",
                    "description": "user's photo"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "avatarURL": {
                      "type": "string",
                      "format": "url",
                      "example": "avatars\\645f9119c19ae2aa1a3fbfeb_D09DD0B0D0BAD0BBD0B5D0B9D0BAD0B0-D09AD0BED182-D0A1D0B0D0B9D0BCD0BED0BDD0B0-v11.png"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "The file must be downloaded"
          },
          "401": {
            "description": "Not authorized"
          }
        }
      }
    },
    "/contacts": {
      "get": {
        "tags": [
          "Contacts"
        ],
        "summary": "Get all user's contacts",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "example": 1
            }
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "example": 20
            }
          },
          {
            "in": "query",
            "name": "favorite",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "allOf": [
                      {
                        "type": "object",
                        "properties": {
                          "_id": {
                            "type": "string",
                            "example": "64664d103a37a360d21e79e2"
                          }
                        }
                      },
                      {
                        "$ref": "#/components/schemas/Contact"
                      }
                    ]
                  }
                }
              }
            }
          },
          "401": {
            "description": "Not authorized"
          }
        }
      },
      "post": {
        "tags": [
          "Contacts"
        ],
        "summary": "Create new user's contacts",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Contact"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactResponse"
                }
              }
            }
          },
          "401": {
            "description": "Not authorized"
          }
        }
      }
    },
    "/contacts/{contactId}": {
      "get": {
        "tags": [
          "Contacts"
        ],
        "summary": "Get contact by ID",
        "parameters": [
          {
            "in": "path",
            "name": "contactId",
            "required": true,
            "schema": {
              "type": "string",
              "example": "645f9119c19ae2aa1a3fbfeb"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactResponse"
                }
              }
            }
          },
          "401": {
            "description": "Not authorized"
          },
          "404": {
            "description": "Contact not found"
          }
        }
      },
      "delete": {
        "tags": [
          "Contacts"
        ],
        "summary": "Delete contact by ID",
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "contactId",
            "required": true,
            "schema": {
              "type": "string",
              "example": "645f9119c19ae2aa1a3fbfeb"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Contact deleted"
          },
          "401": {
            "description": "Not authorized"
          },
          "404": {
            "description": "Contact not found"
          }
        }
      },
      "put": {
        "tags": [
          "Contacts"
        ],
        "summary": "Update contact by ID",
        "parameters": [
          {
            "in": "path",
            "name": "contactId",
            "required": true,
            "schema": {
              "type": "string",
              "example": "645f9119c19ae2aa1a3fbfeb"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "example": "Lily"
                  },
                  "email": {
                    "type": "string",
                    "format": "email",
                    "example": "lily@mail.com"
                  },
                  "phone": {
                    "type": "string",
                    "pattern": "^\\(?(\\d{3})\\)?\\s?(\\d{3})[- ]?(\\d{4})$",
                    "example": "(233) 738-2360"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactResponse"
                }
              }
            }
          },
          "400": {
            "description": "Missing fields"
          },
          "401": {
            "description": "Not authorized"
          },
          "404": {
            "description": "Contact not found"
          }
        }
      },
      "patch": {
        "tags": [
          "Contacts"
        ],
        "summary": "Update contact status by ID",
        "parameters": [
          {
            "in": "path",
            "name": "contactId",
            "required": true,
            "schema": {
              "type": "string",
              "example": "645f9119c19ae2aa1a3fbfeb"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "favorite"
                ],
                "properties": {
                  "favorite": {
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactResponse"
                }
              }
            }
          },
          "400": {
            "description": "Missing field favorite"
          },
          "401": {
            "description": "Not authorized"
          },
          "404": {
            "description": "Contact not found"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Authentification": {
        "type": "object",
        "required": [
          "email",
          "password"
        ],
        "properties": {
          "email": {
            "type": "string",
            "description": "user's email",
            "pattern": "^\\w+([.-_]?\\w+)*@\\w+([.-_]?\\w+)*(\\.\\w{2,3})+$",
            "example": "qwerty_123@gmail.com",
            "format": "email"
          },
          "password": {
            "type": "string",
            "description": "user's password",
            "minLength": 6,
            "example": "Qwerty-123"
          }
        }
      },
      "UserResponse": {
        "type": "object",
        "properties": {
          "user": {
            "type": "object",
            "properties": {
              "email": {
                "type": "string",
                "description": "user's email",
                "pattern": "^\\w+([.-_]?\\w+)*@\\w+([.-_]?\\w+)*(\\.\\w{2,3})+$",
                "example": "qwerty_123@gmail.com",
                "format": "email"
              },
              "subscription": {
                "type": "string",
                "enum": [
                  "starter",
                  "pro",
                  "business"
                ]
              }
            }
          }
        }
      },
      "Contact": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "example": "Lily"
          },
          "email": {
            "type": "string",
            "format": "email",
            "example": "lily@mail.com"
          },
          "phone": {
            "type": "string",
            "pattern": "^\\(?(\\d{3})\\)?\\s?(\\d{3})[- ]?(\\d{4})$",
            "example": "(233) 738-2360"
          },
          "favorite": {
            "type": "boolean"
          }
        }
      },
      "ContactResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Contact"
          },
          {
            "type": "object",
            "properties": {
              "_id": {
                "type": "string",
                "example": "64664d103a37a360d21e79e2"
              },
              "owner": {
                "type": "string",
                "example": "645f9119c19ae2aa1a3fbfeb"
              }
            }
          }
        ]
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}